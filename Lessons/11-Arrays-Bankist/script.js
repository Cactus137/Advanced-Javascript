"use strict";
///////////////////////////////////////
// Th·ª≠ th√°ch vi·∫øt m√£ s·ªë 4

// D·ªÆ LI·ªÜU KI·ªÇM TRA:
const dogs = [
  { weight: 22, curFood: 250, owners: ["Alice", "Bob"] },
  { weight: 8, curFood: 200, owners: ["Matilda"] },
  { weight: 13, curFood: 275, owners: ["Sarah", "John"] },
  { weight: 32, curFood: 340, owners: ["Michael"] },
];
// Julia v√† Kate v·∫´n ƒëang nghi√™n c·ª©u v·ªÅ ch√≥ v√† l·∫ßn n√†y h·ªç ƒëang nghi√™n c·ª©u xem ch√≥ ƒÉn qu√° nhi·ªÅu hay qu√° √≠t.
// ƒÇn qu√° nhi·ªÅu nghƒ©a l√† kh·∫©u ph·∫ßn ƒÉn hi·ªán t·∫°i c·ªßa ch√≥ l·ªõn h∆°n kh·∫©u ph·∫ßn khuy·∫øn ngh·ªã, c√≤n ƒÉn qu√° √≠t th√¨ ng∆∞·ª£c l·∫°i.
// ƒÇn m·ªôt l∆∞·ª£ng v·ª´a ph·∫£i c√≥ nghƒ©a l√† kh·∫©u ph·∫ßn ƒÉn hi·ªán t·∫°i c·ªßa ch√≥ n·∫±m trong kho·∫£ng 10% tr√™n v√† 10% d∆∞·ªõi kh·∫©u ph·∫ßn khuy·∫øn ngh·ªã (xem g·ª£i √Ω).

// 1. L·∫∑p l·∫°i m·∫£ng ch·ª©a c√°c ƒë·ªëi t∆∞·ª£ng ch√≥ v√† ƒë·ªëi v·ªõi m·ªói con ch√≥, h√£y t√≠nh ph·∫ßn th·ª©c ƒÉn ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t v√† th√™m n√≥ v√†o ƒë·ªëi t∆∞·ª£ng l√†m thu·ªôc t√≠nh m·ªõi. KH√îNG t·∫°o m·∫£ng m·ªõi, ch·ªâ c·∫ßn l·∫∑p qua m·∫£ng ƒë√≥. Forumla: khuy·∫øn ngh·ªãTh·ª±c ph·∫©m = tr·ªçng l∆∞·ª£ng ** 0,75 * 28. (K·∫øt qu·∫£ t√≠nh b·∫±ng gam th·ª±c ph·∫©m v√† tr·ªçng l∆∞·ª£ng c·∫ßn t√≠nh b·∫±ng kg)

dogs.forEach((dog) => (dog.recFood = Math.trunc(dog.weight ** 0.75 * 28)));
console.log(dogs);

// 2. T√¨m con ch√≥ c·ªßa Sarah v√† ƒëƒÉng nh·∫≠p v√†o b·∫£ng ƒëi·ªÅu khi·ªÉn xem n√≥ ƒÉn qu√° nhi·ªÅu hay qu√° √≠t. G·ª¢I √ù: M·ªôt s·ªë con ch√≥ c√≥ nhi·ªÅu ch·ªß, v√¨ v·∫≠y tr∆∞·ªõc ti√™n b·∫°n c·∫ßn t√¨m Sarah trong m·∫£ng ch·ªß s·ªü h·ªØu, v√† v√¨ v·∫≠y vi·ªác n√†y h∆°i kh√≥ (c√≥ m·ª•c ƒë√≠ch) ü§ì

// const dogSarah = dogs.find((dog) => dog.owners.includes("Sarah"));
// console.log(dogSarah);
// console.log(
//   `Sarah's dog is eating too ${
//     dogSarah.curFood > dogSarah.recFood ? "much" : "little"
//   } `
// );

// 3. T·∫°o m·ªôt m·∫£ng ch·ª©a t·∫•t c·∫£ ch·ªß s·ªü h·ªØu c·ªßa nh·ªØng con ch√≥ ƒÉn qu√° nhi·ªÅu ('ownersEatTooMuch') v√† m·ªôt m·∫£ng ch·ª©a t·∫•t c·∫£ ch·ªß s·ªü h·ªØu c·ªßa nh·ªØng con ch√≥ ƒÉn qu√° √≠t ('ownersEatTooLittle').

const ownersEatTooMuch = dogs
  .filter((dog) => dog.curFood > dog.recFood * 1, 10)
  .flatMap((dog) => dog.owners);

const ownersEatTooLittle = dogs
  .filter((dog) => dog.curFood < dog.recFood * 1, 10)
  .flatMap((dog) => dog.owners);
console.log(ownersEatTooMuch);
console.log(ownersEatTooLittle);

// 4. Ghi m·ªôt chu·ªói v√†o b·∫£ng ƒëi·ªÅu khi·ªÉn cho m·ªói m·∫£ng ƒë∆∞·ª£c t·∫°o trong 3., nh∆∞ th·∫ø n√†y: "Ch√≥ c·ªßa Matilda v√† Alice v√† Bob ƒÉn qu√° nhi·ªÅu!" v√† "Ch√≥ c·ªßa Sarah, John v√† Michael ƒÉn qu√° √≠t!"

console.log(`${ownersEatTooMuch.join(" and ")}'s dogs eat too much!`);
console.log(`${ownersEatTooLittle.join(" and ")}'s dogs eat too little!`);

// 5. ƒêƒÉng nh·∫≠p v√†o b·∫£ng ƒëi·ªÅu khi·ªÉn xem c√≥ con ch√≥ n√†o ƒÉn CH√çNH X√ÅC l∆∞·ª£ng th·ª©c ƒÉn ƒë∆∞·ª£c khuy·∫øn ngh·ªã hay kh√¥ng (ch·ªâ ƒë√∫ng ho·∫∑c sai)

console.log(dogs.some((dog) => dog.curFood === dog.recFood));

// 6. ƒêƒÉng nh·∫≠p v√†o b·∫£ng ƒëi·ªÅu khi·ªÉn xem c√≥ con ch√≥ n√†o ƒÉn m·ªôt l∆∞·ª£ng th·ª©c ƒÉn OK hay kh√¥ng (ch·ªâ ƒë√∫ng ho·∫∑c sai)

const checkDog = (dog) => (dog.curFood > dog.recFood * 0.90 && dog.curFood < dog.recFood * 1.10);

console.log(dogs.some(checkDog));


// 7. T·∫°o m·ªôt m·∫£ng ch·ª©a nh·ªØng con ch√≥ ƒëang ƒÉn m·ªôt l∆∞·ª£ng th·ª©c ƒÉn OK (c·ªë g·∫Øng s·ª≠ d·ª•ng l·∫°i ƒëi·ªÅu ki·ªán ƒë∆∞·ª£c s·ª≠ d·ª•ng trong 6.)

const dogEatOK = dogs.filter(checkDog);
console.log(dogEatOK);

// 8. T·∫°o m·ªôt b·∫£n sao n√¥ng c·ªßa m·∫£ng ch√≥ v√† s·∫Øp x·∫øp n√≥ theo ph·∫ßn th·ª©c ƒÉn ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t theo th·ª© t·ª± tƒÉng d·∫ßn (h√£y nh·ªõ r·∫±ng c√°c ph·∫ßn n·∫±m b√™n trong c√°c ƒë·ªëi t∆∞·ª£ng c·ªßa m·∫£ng)

const copyDog = dogs.slice().sort((a, b) => a.recFood - b.recFood);

console.log(copyDog);


// G·ª¢I √ù 1: S·ª≠ d·ª•ng nhi·ªÅu c√¥ng c·ª• kh√°c nhau ƒë·ªÉ gi·∫£i c√°c th·ª≠ th√°ch n√†y, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng b√†i gi·∫£ng t√≥m t·∫Øt ƒë·ªÉ l·ª±a ch·ªçn gi·ªØa ch√∫ng üòâ
// G·ª¢I √ù 2: N·∫±m trong ph·∫°m vi 10% tr√™n v√† d∆∞·ªõi ph·∫ßn ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t c√≥ nghƒ©a l√†: hi·ªán t·∫°i > (ƒë∆∞·ª£c khuy·∫øn ngh·ªã * 0,90) && hi·ªán t·∫°i < (ƒë∆∞·ª£c khuy·∫øn ngh·ªã * 1,10). V·ªÅ c∆° b·∫£n, ph·∫ßn hi·ªán t·∫°i ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 90% ƒë·∫øn 110% ph·∫ßn ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t.

// const z = Array.from({ length: 100 }, () =>
//   Array.from({ length: 3 }, () => Math.floor(Math.random() * (6 - 1 + 1) + 1))
// );
// console.log(z);

// Coding Challenge #2

/* 
Ch√∫ng ta h√£y quay tr·ªü l·∫°i nghi√™n c·ª©u c·ªßa Julia v√† Kate v·ªÅ lo√†i ch√≥. L·∫ßn n√†y, h·ªç mu·ªën chuy·ªÉn ƒë·ªïi tu·ªïi c·ªßa ch√≥ sang tu·ªïi c·ªßa con ng∆∞·ªùi v√† t√≠nh tu·ªïi trung b√¨nh c·ªßa nh·ªØng con ch√≥ trong nghi√™n c·ª©u c·ªßa h·ªç.

T·∫°o h√†m 'calcAverageHumanAge', ch·∫•p nh·∫≠n m·ªôt m·∫£ng ƒë·ªô tu·ªïi c·ªßa ch√≥ ('ages') v√† th·ª±c hi·ªán nh·ªØng vi·ªác sau theo th·ª© t·ª±:

1. T√≠nh tu·ªïi ch√≥ theo nƒÉm c·ªßa con ng∆∞·ªùi b·∫±ng c√¥ng th·ª©c sau: n·∫øu ch√≥ <= 2 tu·ªïi th√¨ humanAge = 2 * dogAge. N·∫øu ch√≥ > 2 tu·ªïi, humanAge = 16 + dogAge * 4.
2. Lo·∫°i tr·ª´ t·∫•t c·∫£ nh·ªØng con ch√≥ d∆∞·ªõi 18 tu·ªïi (gi·ªëng nh∆∞ nu√¥i nh·ªØng con ch√≥ √≠t nh·∫•t 18 tu·ªïi)
3. T√≠nh tu·ªïi trung b√¨nh c·ªßa con ng∆∞·ªùi c·ªßa t·∫•t c·∫£ ch√≥ tr∆∞·ªüng th√†nh (b·∫°n h·∫≥n ƒë√£ bi·∫øt t·ª´ nh·ªØng th·ª≠ th√°ch kh√°c v·ªÅ c√°ch ch√∫ng t√¥i t√≠nh trung b√¨nh üòâ)
4. Ch·∫°y h√†m cho c·∫£ hai t·∫≠p d·ªØ li·ªáu th·ª≠ nghi·ªám

D·ªÆ LI·ªÜU KI·ªÇM TRA 1: [5, 2, 4, 1, 15, 8, 3]
D·ªÆ LI·ªÜU KI·ªÇM TRA 2: [16, 6, 10, 5, 6, 1, 4]

Ch√∫c may m·∫Øn üòÄ
*/
// const dogAges = [5, 2, 4, 1, 15, 8, 3];
// const calcAverageHumanAge = function (dogAges) {
// const calcAverageHumanAge = (dogAges) => {
//   const humanAges = dogAges.map((dogAge) =>
//     dogAge <= 2 ? 2 * dogAge : 16 + dogAge * 4
//   );
//   const humanAgeAfter = humanAges.filter((humanAge) => humanAge >= 18);
//   return humanAgeAfter.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);

// };

//   }
// ;
// console.log(humanAges);

// console.log(calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]));
// console.log(calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]));

// Coding Challenge #1

/* 
Julia and Kate are doing a study on dogs. So each of them asked 5 dog owners about their dog's age, and stored the data into an array (one array for each). For now, they are just interested in knowing whether a dog is an adult or a puppy. A dog is an adult if it is at least 3 years old, and it's a puppy if it's less than 3 years old.

Create a function 'checkDogs', which accepts 2 arrays of dog's ages ('dogsJulia' and 'dogsKate'), and does the following things:

1. Julia found out that the owners of the FIRST and the LAST TWO dogs actually have cats, not dogs! So create a shallow copy of Julia's array, and remove the cat ages from that copied array (because it's a bad practice to mutate function parameters)
2. Create an array with both Julia's (corrected) and Kate's data
3. For each remaining dog, log to the console whether it's an adult ("Dog number 1 is an adult, and is 5 years old") or a puppy ("Dog number 2 is still a puppy üê∂")
4. Run the function for both test datasets

HINT: Use tools from all lectures in this section so far üòâ

TEST DATA 1: Julia's data [3, 5, 2, 12, 7], Kate's data [4, 1, 15, 8, 3]
TEST DATA 2: Julia's data [9, 16, 6, 8, 3], Kate's data [10, 5, 6, 1, 4] 
*/

// const checkDogs = function (dogsJulia, dogsKate) {
//   const dogsJuliaCorrected = dogsJulia.slice();
//   dogsJuliaCorrected.splice(0, 1);
//   dogsJuliaCorrected.splice(-2);
//   const dogs = dogsJuliaCorrected.concat(dogsKate);

//   dogs.forEach(function (dog, i) {
//     if (dog >= 3) {
//       console.log(`Ch√∫ ch√≥ ${i + 1} ƒë√£ tr∆∞·ªüng th√†nh`);
//     } else {
//       console.log(`Ch√∫ ch√≥ ${i + 1} v·∫´n l√† ch√≥ con üê∂`);
//     }
//   });
// };

// checkDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]);

/*
let arr = ["a", "b", "c", "d", "e"];

// SLICE METHOD
console.log(arr.slice(2));
console.log(arr.slice(2, 4));
console.log(arr.slice(-1));
console.log(arr.slice(1, -2));
console.log(arr.slice());
console.log([...arr]);
console.log(arr);

//SPLICE METHOD

// console.log(arr.splice(2));
arr.splice(-1);
console.log(arr);
arr.splice(1, 2);
console.log(arr);

//REVERSE
arr = ["a", "b", "c", "d", "e"];
const arr2 = ["1", "2", "3", "4", "5"];
console.log(arr2.reverse());
console.log(arr2);

//CONCAT
console.log("-------");
const letters = arr.concat(arr2);
console.log(letters);
console.log([...arr, ...arr2]);

//JOIN 
console.log(letters.join('.'));
*/

/*
const arr = [23, 11, 64];
console.log(arr[0]);
console.log(arr.at(0));

// geting last array element
console.log(arr[arr.length -1]);
console.log(arr.slice(-1)[0]);
console.log(arr.at(-1)); 

console.log("cactus".at(0));
console.log("cactus".at(-1));
*/

// const movements = [200, 450, -400, 544, 494, -222, 34, -1999];

// for(const movement of movements) {
//     if(movement > 0) {
//         console.log(`You deposited ${movement}`);
//     }else {
//         console.log(`You withdrew ${Math.abs(movement)}`);
//     }
// }
// console.log('forEach');
// movements.forEach(function(movement) {
//     if(movement > 0) {
//         console.log(`You deposited ${movement}`);
//     }else {
//         console.log(`You withdrew ${Math.abs(movement)}`);
//     }
// })
